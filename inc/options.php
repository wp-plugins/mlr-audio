<?php/* * @package   MLRAudio * @version   0.1 * @since     0.1 * @author    Matthew Lillistone <matthewlillistone.co.uk> *  */add_action('admin_enqueue_scripts','enqueue_mlaudio_admin_scripts');
add_action('admin_menu', 'ml_audio_plugin_settings');
function ml_audio_plugin_settings() {	global $ml_audio_plugin_page;	$ml_audio_plugin_page = add_plugins_page(		'MLR Audio settings', 		'MLR Audio Settings', 		'administrator', 		'mlag', 		'ml_audio_plugin_display'		);}add_filter('contextual_help', 'ml_audio_plugin_help', 10, 3);function ml_audio_plugin_help($contextual_help, $screen_id, $screen) {if('plugins_page_mlag' != $screen_id) {	return;	}	$screen->add_help_tab( array(        'id'      => 'ml_shortcode-help',        'title'   => __('Shortcode','ML'),        'content' => '',         'callback' => 'ml_audio_shortcode_help'    ));	$screen->add_help_tab( array(        'id'      => 'ml_general-help',        'title'   => __('Styles','ML'),        'content' => '',         'callback' => 'ml_audio_styles_help'    ));$screen->add_help_tab( array(        'id'      => 'ml_custom-help',        'title'   => __('Custom Post Type','ML'),        'content' => '',         'callback' => 'ml_audio_custom_help'    ));	$screen->add_help_tab( array(        'id'      => 'ml_responsive-help',        'title'   => __('Responsive','ML'),        'content' => '',         'callback' => 'ml_audio_responsive_help'    ));	get_current_screen()->set_help_sidebar(        '<p><strong>' . __('For a demo:','ML') . '</strong></p>        <p><a href="http://matthewlillistone.co.uk/?page_id=1030" title="MLR Audio page" target="_blank">'.__('MLR Audio demo page','ML').'</a></p>'    );	return $contextual_help;}function ml_audio_shortcode_help() {			echo '<h2>'.__('Shortcode Parameters','ML').'</h2>';		echo '<b>'.__('The standard shortcode','ML').'</b><br />';		echo __('[ml_audio] will display all custom audio posts as a playlist.','ML').'<br />';		echo '<b>'.__('Filter by Audio Category','ML').'</b><br />';		echo __('Specify the category-name-slug.','ML').'<br />';		echo __('Example','ML').': [ml_audio audio_category="della, floyd"]<br />';		echo '<b>'.__('Orderby title or date ascending or descending','ML').'</b><br />';		echo __('Example','ML').': [ml_audio orderby="title" order="ASC"] '.__('will order the playlist alphabetically A-Z.','ML').'<br />';		echo __('Example','ML').': [ml_audio orderby="date" order="DESC"] '.__('will order the playlist by most recent to oldest date.','ML');		}function ml_audio_styles_help() {		echo '<h3>'.__('Styles','ML').'</h3>';		echo '<b>'.__('Audio Player Styles Info','ML').'</b><br />';		echo __('Custom styles rely on the \'wp_head\' hook.','ML').'<br />';		echo __('Make sure your theme has this hook in the header.','ML').'<br />';		echo __('The default height value of the playlist is 200px.','ML').'<br />';				}function ml_audio_custom_help() {		echo '<h3>' .__('Custom Post Type','ML').'</h3>';		echo __('Tracks are added using the Audio Element custom post type.','ML').'<br />';		echo __('You are able to upload 3 different formats for each track.','ML').'<br />';		echo __('Different browsers support different audio formats. For cross browser compatability I recommend 				providing at least the .mp3 and .ogg formats.','ML').'<br />';		echo __('There is no flash fallback.','ML').'<br />';				}function ml_audio_responsive_help() {		echo '<h3>'.__('Responsive','ML').'</h3>';		echo __('Audio player will fill the width of it\'s parent div. ','ML'); 		echo __('It will resize on smaller screens.','ML').'<br />';				}
function ml_audio_plugin_display() { ?><div class="wrap">	<div id="ml_icon" class="pretty_icon"></div>	<h2>MLR Audio Options</h2>
<?php settings_errors(); ?> 
<form id="ml_audio_opts" method="post" action="options.php"><?php settings_fields('mlag'); ?><?php do_settings_sections('mlag'); ?><?php submit_button(); ?></form>
</div><!----End Wrap---->
<?php }  // End plugin display
//== Register section ==//
add_action( 'admin_init', 'ml_audio_options_mlsettings' );
function ml_audio_options_mlsettings() {		//== Register our settings ==//register_setting(	'mlag',	'mlag',	'ml_audio_validation'	);
//== Add our sections ==//
add_settings_section(	'mlag_general_section', //ID	__('Player Options','ML'),	//Name	'ml_audio_options_callback',		//Callback funtion for description purposes	'mlag'					//Page to add section to	);	add_settings_section(	'mlag_color_section', //ID	__('Colours','ML'),		//Name	'ml_audio_color_options_callback',		//Callback funtion for description purposes	'mlag'					//Page to add section to	);	
//== Add our player settings fields to be included in our section ==//add_settings_field(	'input_playlist_height',	__('Playlist height','ML'),	'ml_audio_playlist_height_callback',	'mlag',	'mlag_general_section'	);	add_settings_field(	'input_playlist_hidden',	__('Playlist hidden on page load','ML'),	'ml_audio_playlist_hidden_callback',	'mlag',	'mlag_general_section'	);	add_settings_field(	'select_playlist_order',	__('Playlist order','ML'),	'ml_audio_playlist_order_callback',	'mlag',	'mlag_general_section'	);add_settings_field(	'auto_play_song',	__('Autoplay on page load?','ML'),	'ml_audio_autoplay_callback',	'mlag',	'mlag_general_section'	);	add_settings_field(	'song_image',	__('Display image in player header?','ML'),	'ml_audio_image_callback',	'mlag',	'mlag_general_section'	);	//== Add our colour settings fields to be included in our section ==//add_settings_field(	'select_playlist_bg_color',			//ID	__('Playlist background colour','ML'),		//Name of field renders left	'ml_audio_playlist_bg_color_callback',	//Callback function renders actual field	'mlag',								//Page to add field to	'mlag_color_section'				//Section field renders in	);	add_settings_field(	'select_controls_bg_color',	__('Controls background colour','ML'),	'ml_audio_controls_bg_color_callback',	'mlag',	'mlag_color_section'	);	add_settings_field(	'select_header_bg_color',	__('Header background colour','ML'),	'ml_audio_header_bg_color_callback',	'mlag',	'mlag_color_section'	);	add_settings_field(	'select_scrollbar_color',	__('Playlist scrollbar colour','ML'),	'ml_audio_scroll_color_callback',	'mlag',	'mlag_color_section'	);	add_settings_field(	'select_buttons_bg_color',	__('Control buttons colour','ML'),	'ml_audio_buttons_color_callback',	'mlag',	'mlag_color_section'	);add_settings_field(	'select_buttons_hover_color',	__('Control button hover colour','ML'),	'ml_audio_buttons_hover_color_callback',	'mlag',	'mlag_color_section'	);	add_settings_field(	'select_volume_color',	__('Control volume colour','ML'),	'ml_audio_volume_color_callback',	'mlag',	'mlag_color_section'	);	add_settings_field(	'select_header_text_color',	__('Header text colour','ML'),	'ml_audio_header_text_callback',	'mlag',	'mlag_color_section'	);add_settings_field(	'select_playlist_text_color',	__('Playlist track title colour','ML'),	'ml_audio_playlist_text_color_callback',	'mlag',	'mlag_color_section'	);	add_settings_field(	'select_playlist_by_color',	__('Track \'by\' colour','ML'),	'ml_audio_track_by_color_callback',	'mlag',	'mlag_color_section'	);	}
//== Section Callbacks ==//
function ml_audio_options_callback() {	echo '<p>'._e('Your options for the Player.','ML').'</p>';	}	function ml_audio_color_options_callback() {	echo '<p>'._e('Customise player colours.','ML').'</p>';	}
//== Callback functions for the general settings ==//
function ml_audio_playlist_height_callback() {	$options = get_option( 'mlag' );	$html = 'Minimum value = 200px, Maximum value = total height of list.<br />';	$html .= '<input type="text" style="width:40px;" id="ml_playlist_height" name="mlag[playlist_height]" value="' .$options['playlist_height']. '"> px';				
	echo $html;	
}function ml_audio_playlist_hidden_callback() {	$options = get_option( 'mlag' );	$html = '<input type="checkbox" id="ml_playlist_hidden" name="mlag[playlist_hidden]" value="1"' . checked( 1, $options['playlist_hidden'], false ) . '/>';		echo $html;}function ml_audio_autoplay_callback() {		$options = get_option( 'mlag' );	$html = '<input type="checkbox" style="margin-right:20px;" id="ml_autoplay" name="mlag[auto]" value="1"' . checked( 1, $options['auto'], false ) . '/>';		echo $html;	}function ml_audio_image_callback() {		$options = get_option( 'mlag' );	$html = __('The image will be hidden if the player width is less than 345px.','ML').'<br />';	$html .= '<input type="checkbox" style="margin-right:20px;" id="imageon" name="mlag[imageon]" value="1"' . checked( 1, $options['imageon'], false ) . '/>';		$html .= '<select id="image_position" name="mlag[image_pos]">';                $html .= '<option value="default">' . __( 'Position of image...', 'ML' ) . '</option>';                $html .= '<option value="left"' . selected( $options['image_pos'], 'left', false) . '>' . __( 'Left', 'ML' ) . '</option>';                $html .= '<option value="right"' . selected( $options['image_pos'], 'right', false) . '>' . __( 'Right', 'ML' ) . '</option>'; 	$html .= '</select>';	echo $html;}function ml_audio_playlist_order_callback() {		$options = get_option( 'mlag' );	$html = __('These settings can be over-ridden for individual shortcodes.','ML').'<br />';	$html .= '<select id="ml_orderby" style="margin-right:20px;" name="mlag[audio_orderby]">';                $html .= '<option value="default">' . __( 'Order by...', 'ML' ) . '</option>';                $html .= '<option value="title"' . selected( $options['audio_orderby'], 'title', false) . '>' . __( 'Title', 'ML' ) . '</option>';                $html .= '<option value="date"' . selected( $options['audio_orderby'], 'date', false) . '>' . __( 'Date', 'ML' ) . '</option>'; 	$html .= '</select>';		$html .= '<select id="ml_order" name="mlag[audio_order]">';                $html .= '<option value="default">' . __( 'Order...', 'ML' ) . '</option>';                $html .= '<option value="ASC"' . selected( $options['audio_order'], 'ASC', false) . '>' . __( 'Ascending', 'ML' ) . '</option>';                $html .= '<option value="DESC"' . selected( $options['audio_order'], 'DESC', false) . '>' . __( 'Descending', 'ML' ) . '</option>'; 	$html .= '</select>';		echo $html;}//== Callback functions for the colour fields ==//function ml_audio_playlist_bg_color_callback() {	$options = get_option( 'mlag' );        	$html = '<input type="text" style="width:100px;" class="player_colors" id="player_color_one" name="mlag[player_color_one]" value="' .$options['player_color_one']. '">';		echo $html;}function ml_audio_controls_bg_color_callback() {	$options = get_option( 'mlag' );			$html = '<input type="text" style="width:100px;" class="player_colors" id="player_color_two" name="mlag[player_color_two]" value="' .$options['player_color_two']. '">';					echo $html;		}function ml_audio_header_bg_color_callback() {	$options = get_option( 'mlag' );			$html = '<input type="text" style="width:100px;" class="player_colors" id="player_color_three" name="mlag[player_color_three]" value="' .$options['player_color_three']. '">';		echo $html;		}function ml_audio_scroll_color_callback() {	$options = get_option( 'mlag' );			$html = '<input type="text" style="width:100px;" class="player_colors" id="player_color_four" name="mlag[player_color_four]" value="' .$options['player_color_four']. '">';		echo $html;		}function ml_audio_buttons_color_callback() {	$options = get_option( 'mlag' );			$html = '<input type="text" style="width:100px;" class="player_colors" id="player_color_five" name="mlag[player_color_five]" value="' .$options['player_color_five']. '">';		echo $html;		}function ml_audio_buttons_hover_color_callback() {	$options = get_option( 'mlag' );			$html = '<input type="text" style="width:100px;" class="player_colors" id="player_color_seven" name="mlag[player_color_seven]" value="' .$options['player_color_seven']. '">';		echo $html;		}function ml_audio_volume_color_callback() {	$options = get_option( 'mlag' );			$html = '<input type="text" style="width:100px;" class="player_colors" id="player_color_eight" name="mlag[player_color_eight]" value="' .$options['player_color_eight']. '">';		echo $html;		}function ml_audio_header_text_callback() {	$options = get_option( 'mlag' );			$html = '<input type="text" style="width:100px;" class="player_colors" id="player_color_nine" name="mlag[player_color_nine]" value="' .$options['player_color_nine']. '">';		echo $html;		}function ml_audio_playlist_text_color_callback() {	$options = get_option( 'mlag' );			$html = '<input type="text" style="width:100px;" class="player_colors" id="player_color_ten" name="mlag[player_color_ten]" value="' .$options['player_color_ten']. '">';		echo $html;		}function ml_audio_track_by_color_callback() {	$options = get_option( 'mlag' );			$html = '<input type="text" style="width:100px;" class="player_colors" id="player_color_eleven" name="mlag[player_color_eleven]" value="' .$options['player_color_eleven']. '">';		echo $html;		}	//== Callback for enqueueing the color picker on this page ==// 	function enqueue_mlaudio_admin_scripts($hook) {		if('plugins_page_mlag' !== $hook) {			return; 			}				wp_enqueue_script( 'wp-color-picker' );				wp_enqueue_script( 'ml-color-pickme', plugins_url('mlr-audio/js/ml.color.picker.js'), array('jquery','wp-color-picker'), false, true );				wp_enqueue_style( 'wp-color-picker' );				}//== Validation callback ==//function ml_audio_validation( $input ) {if(!preg_match('/^[1-9][0-9]{0,4}$/', $input['playlist_height'])) {$input['playlist_height'] = '';}else {	$input['playlist_height'] = trim($input['playlist_height']);	}return $input;}	
?>